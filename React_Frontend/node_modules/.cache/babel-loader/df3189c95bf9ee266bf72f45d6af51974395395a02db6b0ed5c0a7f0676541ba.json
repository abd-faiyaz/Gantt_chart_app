{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport HolidayService from '../services/HolidayService';\n\n/**\n * Custom hook for date calculations with holiday awareness\n */\nconst useDateCalculation = () => {\n  _s();\n  const [holidays, setHolidays] = useState([]);\n  const [calculatedEndDate, setCalculatedEndDate] = useState('');\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [validationMessage, setValidationMessage] = useState('');\n\n  // Fetch holidays on hook initialization\n  useEffect(() => {\n    const fetchHolidays = async () => {\n      try {\n        const holidayData = await HolidayService.fetchHolidays();\n        setHolidays(holidayData);\n        console.log('useDateCalculation: Loaded holidays:', holidayData.length);\n      } catch (error) {\n        console.error('useDateCalculation: Error loading holidays:', error);\n      }\n    };\n    fetchHolidays();\n  }, []);\n\n  /**\n   * Calculate end date based on start date and estimate days\n   */\n  const calculateEndDate = useCallback(async (startDate, estimateDays) => {\n    if (!startDate || !estimateDays || estimateDays <= 0) {\n      setCalculatedEndDate('');\n      return null;\n    }\n    setIsCalculating(true);\n    setValidationMessage('');\n    try {\n      const result = await HolidayService.calculateEndDate(startDate, estimateDays);\n      if (result && result.calculatedEndDate) {\n        setCalculatedEndDate(result.calculatedEndDate);\n        console.log('useDateCalculation: Calculated end date:', result.calculatedEndDate);\n        return result.calculatedEndDate;\n      }\n    } catch (error) {\n      console.error('useDateCalculation: Error calculating end date:', error);\n      setValidationMessage('Error calculating end date');\n    } finally {\n      setIsCalculating(false);\n    }\n    return null;\n  }, []);\n\n  /**\n   * Validate user-selected end date\n   */\n  const validateEndDate = useCallback(async (startDate, estimateDays, selectedEndDate) => {\n    if (!startDate || !estimateDays || !selectedEndDate) {\n      setValidationMessage('');\n      return true;\n    }\n    try {\n      const result = await HolidayService.validateEndDate(startDate, estimateDays, selectedEndDate);\n      if (result) {\n        setValidationMessage(result.isValid ? '' : result.message);\n        return result.isValid;\n      }\n    } catch (error) {\n      console.error('useDateCalculation: Error validating end date:', error);\n      setValidationMessage('Error validating end date');\n    }\n    return false;\n  }, []);\n\n  /**\n   * Check if a date is a holiday\n   */\n  const isHoliday = useCallback(date => {\n    return holidays.some(holiday => holiday.holidayDate === date);\n  }, [holidays]);\n\n  /**\n   * Check if a date is a non-working holiday\n   */\n  const isNonWorkingHoliday = useCallback(date => {\n    const holiday = holidays.find(h => h.holidayDate === date);\n    return holiday && !holiday.isWorkingDay;\n  }, [holidays]);\n\n  /**\n   * Get holiday information for a specific date\n   */\n  const getHolidayInfo = useCallback(date => {\n    return holidays.find(holiday => holiday.holidayDate === date);\n  }, [holidays]);\n\n  /**\n   * Check if a date is a weekend\n   */\n  const isWeekend = useCallback(date => {\n    const dayOfWeek = new Date(date).getDay();\n    return dayOfWeek === 0 || dayOfWeek === 6; // Sunday = 0, Saturday = 6\n  }, []);\n\n  /**\n   * Check if a date should be disabled (weekend or non-working holiday)\n   */\n  const shouldDisableDate = useCallback(date => {\n    return isWeekend(date) || isNonWorkingHoliday(date);\n  }, [isWeekend, isNonWorkingHoliday]);\n\n  /**\n   * Get CSS class for date styling in calendar\n   */\n  const getDateClassName = useCallback(date => {\n    const dateStr = date.toISOString().split('T')[0];\n    if (isNonWorkingHoliday(dateStr)) {\n      return 'holiday-date non-working';\n    }\n    if (isHoliday(dateStr)) {\n      return 'holiday-date working';\n    }\n    if (isWeekend(dateStr)) {\n      return 'weekend-date';\n    }\n    return 'working-date';\n  }, [isHoliday, isNonWorkingHoliday, isWeekend]);\n  return {\n    holidays,\n    calculatedEndDate,\n    isCalculating,\n    validationMessage,\n    calculateEndDate,\n    validateEndDate,\n    isHoliday,\n    isNonWorkingHoliday,\n    getHolidayInfo,\n    isWeekend,\n    shouldDisableDate,\n    getDateClassName\n  };\n};\n_s(useDateCalculation, \"K91acaXmVoZpWQn/I9PHwq1oWjc=\");\nexport default useDateCalculation;","map":{"version":3,"names":["useState","useEffect","useCallback","HolidayService","useDateCalculation","_s","holidays","setHolidays","calculatedEndDate","setCalculatedEndDate","isCalculating","setIsCalculating","validationMessage","setValidationMessage","fetchHolidays","holidayData","console","log","length","error","calculateEndDate","startDate","estimateDays","result","validateEndDate","selectedEndDate","isValid","message","isHoliday","date","some","holiday","holidayDate","isNonWorkingHoliday","find","h","isWorkingDay","getHolidayInfo","isWeekend","dayOfWeek","Date","getDay","shouldDisableDate","getDateClassName","dateStr","toISOString","split"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/hooks/useDateCalculation.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport HolidayService from '../services/HolidayService';\n\n/**\n * Custom hook for date calculations with holiday awareness\n */\nconst useDateCalculation = () => {\n    const [holidays, setHolidays] = useState([]);\n    const [calculatedEndDate, setCalculatedEndDate] = useState('');\n    const [isCalculating, setIsCalculating] = useState(false);\n    const [validationMessage, setValidationMessage] = useState('');\n\n    // Fetch holidays on hook initialization\n    useEffect(() => {\n        const fetchHolidays = async () => {\n            try {\n                const holidayData = await HolidayService.fetchHolidays();\n                setHolidays(holidayData);\n                console.log('useDateCalculation: Loaded holidays:', holidayData.length);\n            } catch (error) {\n                console.error('useDateCalculation: Error loading holidays:', error);\n            }\n        };\n\n        fetchHolidays();\n    }, []);\n\n    /**\n     * Calculate end date based on start date and estimate days\n     */\n    const calculateEndDate = useCallback(async (startDate, estimateDays) => {\n        if (!startDate || !estimateDays || estimateDays <= 0) {\n            setCalculatedEndDate('');\n            return null;\n        }\n\n        setIsCalculating(true);\n        setValidationMessage('');\n\n        try {\n            const result = await HolidayService.calculateEndDate(startDate, estimateDays);\n            if (result && result.calculatedEndDate) {\n                setCalculatedEndDate(result.calculatedEndDate);\n                console.log('useDateCalculation: Calculated end date:', result.calculatedEndDate);\n                return result.calculatedEndDate;\n            }\n        } catch (error) {\n            console.error('useDateCalculation: Error calculating end date:', error);\n            setValidationMessage('Error calculating end date');\n        } finally {\n            setIsCalculating(false);\n        }\n\n        return null;\n    }, []);\n\n    /**\n     * Validate user-selected end date\n     */\n    const validateEndDate = useCallback(async (startDate, estimateDays, selectedEndDate) => {\n        if (!startDate || !estimateDays || !selectedEndDate) {\n            setValidationMessage('');\n            return true;\n        }\n\n        try {\n            const result = await HolidayService.validateEndDate(startDate, estimateDays, selectedEndDate);\n            if (result) {\n                setValidationMessage(result.isValid ? '' : result.message);\n                return result.isValid;\n            }\n        } catch (error) {\n            console.error('useDateCalculation: Error validating end date:', error);\n            setValidationMessage('Error validating end date');\n        }\n\n        return false;\n    }, []);\n\n    /**\n     * Check if a date is a holiday\n     */\n    const isHoliday = useCallback((date) => {\n        return holidays.some(holiday => holiday.holidayDate === date);\n    }, [holidays]);\n\n    /**\n     * Check if a date is a non-working holiday\n     */\n    const isNonWorkingHoliday = useCallback((date) => {\n        const holiday = holidays.find(h => h.holidayDate === date);\n        return holiday && !holiday.isWorkingDay;\n    }, [holidays]);\n\n    /**\n     * Get holiday information for a specific date\n     */\n    const getHolidayInfo = useCallback((date) => {\n        return holidays.find(holiday => holiday.holidayDate === date);\n    }, [holidays]);\n\n    /**\n     * Check if a date is a weekend\n     */\n    const isWeekend = useCallback((date) => {\n        const dayOfWeek = new Date(date).getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6; // Sunday = 0, Saturday = 6\n    }, []);\n\n    /**\n     * Check if a date should be disabled (weekend or non-working holiday)\n     */\n    const shouldDisableDate = useCallback((date) => {\n        return isWeekend(date) || isNonWorkingHoliday(date);\n    }, [isWeekend, isNonWorkingHoliday]);\n\n    /**\n     * Get CSS class for date styling in calendar\n     */\n    const getDateClassName = useCallback((date) => {\n        const dateStr = date.toISOString().split('T')[0];\n        \n        if (isNonWorkingHoliday(dateStr)) {\n            return 'holiday-date non-working';\n        }\n        if (isHoliday(dateStr)) {\n            return 'holiday-date working';\n        }\n        if (isWeekend(dateStr)) {\n            return 'weekend-date';\n        }\n        return 'working-date';\n    }, [isHoliday, isNonWorkingHoliday, isWeekend]);\n\n    return {\n        holidays,\n        calculatedEndDate,\n        isCalculating,\n        validationMessage,\n        calculateEndDate,\n        validateEndDate,\n        isHoliday,\n        isNonWorkingHoliday,\n        getHolidayInfo,\n        isWeekend,\n        shouldDisableDate,\n        getDateClassName\n    };\n};\n\nexport default useDateCalculation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}