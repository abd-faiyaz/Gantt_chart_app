{"ast":null,"code":"// This file contains helper functions to interact with your backend Task API using fetch.\n// Each function corresponds to a REST endpoint in your Spring Boot TaskController.\n\nconst BASE_URL = \"http://localhost:8080/tasks\"; // Base URL for your backend\n\n// 1. GET all tasks\nexport async function getAllTasks() {\n  // Calls GET /tasks to fetch all tasks from backend\n  const response = await fetch(BASE_URL, {\n    method: \"GET\",\n    // HTTP GET request\n    headers: {\n      \"Content-Type\": \"application/json\"\n    } // Expect JSON response\n  });\n  // Parse JSON response and return\n  return await response.json();\n}\n\n// 2. GET a single task by ID\nexport async function getTaskById(id) {\n  // Calls GET /tasks/{id} to fetch a specific task\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"GET\",\n    // HTTP GET request\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  // Parse JSON and return (null if not found)\n  if (response.ok) {\n    return await response.json();\n  }\n  return null;\n}\n\n// 3. POST a new task (create)\nexport async function createTask(taskData) {\n  // Calls POST /tasks to create a new task\n  const response = await fetch(BASE_URL, {\n    method: \"POST\",\n    // HTTP POST request\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(taskData) // Send task data as JSON\n  });\n  // Parse and return the created task\n  return await response.json();\n}\n\n// 4. PUT to update an existing task\nexport async function updateTask(id, updatedData) {\n  // Calls PUT /tasks/{id} to update the task\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"PUT\",\n    // HTTP PUT request\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updatedData) // Send updated task data as JSON\n  });\n  // Parse and return the updated task\n  return await response.json();\n}\n\n// 5. DELETE a task by ID\nexport async function deleteTask(id) {\n  // Calls DELETE /tasks/{id} to remove a task\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"DELETE\" // HTTP DELETE request\n  });\n  // Return true if deleted successfully (204), false otherwise\n  return response.status === 204;\n}","map":{"version":3,"names":["BASE_URL","getAllTasks","response","fetch","method","headers","json","getTaskById","id","ok","createTask","taskData","body","JSON","stringify","updateTask","updatedData","deleteTask","status"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/api/taskApi.js"],"sourcesContent":["// This file contains helper functions to interact with your backend Task API using fetch.\n// Each function corresponds to a REST endpoint in your Spring Boot TaskController.\n\nconst BASE_URL = \"http://localhost:8080/tasks\"; // Base URL for your backend\n\n// 1. GET all tasks\nexport async function getAllTasks() {\n    // Calls GET /tasks to fetch all tasks from backend\n    const response = await fetch(BASE_URL, {\n        method: \"GET\", // HTTP GET request\n        headers: { \"Content-Type\": \"application/json\" }, // Expect JSON response\n    });\n    // Parse JSON response and return\n    return await response.json();\n}\n\n// 2. GET a single task by ID\nexport async function getTaskById(id) {\n    // Calls GET /tasks/{id} to fetch a specific task\n    const response = await fetch(`${BASE_URL}/${id}`, {\n        method: \"GET\", // HTTP GET request\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n    // Parse JSON and return (null if not found)\n    if (response.ok) {\n        return await response.json();\n    }\n    return null;\n}\n\n// 3. POST a new task (create)\nexport async function createTask(taskData) {\n    // Calls POST /tasks to create a new task\n    const response = await fetch(BASE_URL, {\n        method: \"POST\", // HTTP POST request\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(taskData), // Send task data as JSON\n    });\n    // Parse and return the created task\n    return await response.json();\n}\n\n// 4. PUT to update an existing task\nexport async function updateTask(id, updatedData) {\n    // Calls PUT /tasks/{id} to update the task\n    const response = await fetch(`${BASE_URL}/${id}`, {\n        method: \"PUT\", // HTTP PUT request\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updatedData), // Send updated task data as JSON\n    });\n    // Parse and return the updated task\n    return await response.json();\n}\n\n// 5. DELETE a task by ID\nexport async function deleteTask(id) {\n    // Calls DELETE /tasks/{id} to remove a task\n    const response = await fetch(`${BASE_URL}/${id}`, {\n        method: \"DELETE\", // HTTP DELETE request\n    });\n    // Return true if deleted successfully (204), false otherwise\n    return response.status === 204;\n}"],"mappings":"AAAA;AACA;;AAEA,MAAMA,QAAQ,GAAG,6BAA6B,CAAC,CAAC;;AAEhD;AACA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAChC;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,EAAE;IACnCI,MAAM,EAAE,KAAK;IAAE;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC,CAAE;EACrD,CAAC,CAAC;EACF;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeC,WAAWA,CAACC,EAAE,EAAE;EAClC;EACA,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,EAAE;IAC9CJ,MAAM,EAAE,KAAK;IAAE;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAClD,CAAC,CAAC;EACF;EACA,IAAIH,QAAQ,CAACO,EAAE,EAAE;IACb,OAAO,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;EAChC;EACA,OAAO,IAAI;AACf;;AAEA;AACA,OAAO,eAAeI,UAAUA,CAACC,QAAQ,EAAE;EACvC;EACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,EAAE;IACnCI,MAAM,EAAE,MAAM;IAAE;IAChBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,CAAE;EACpC,CAAC,CAAC;EACF;EACA,OAAO,MAAMT,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeS,UAAUA,CAACP,EAAE,EAAEQ,WAAW,EAAE;EAC9C;EACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,EAAE;IAC9CJ,MAAM,EAAE,KAAK;IAAE;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW,CAAC,CAAE;EACvC,CAAC,CAAC;EACF;EACA,OAAO,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeW,UAAUA,CAACT,EAAE,EAAE;EACjC;EACA,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,IAAIQ,EAAE,EAAE,EAAE;IAC9CJ,MAAM,EAAE,QAAQ,CAAE;EACtB,CAAC,CAAC;EACF;EACA,OAAOF,QAAQ,CAACgB,MAAM,KAAK,GAAG;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}