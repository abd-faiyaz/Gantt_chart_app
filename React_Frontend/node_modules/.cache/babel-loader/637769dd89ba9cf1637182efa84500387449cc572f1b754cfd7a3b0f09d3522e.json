{"ast":null,"code":"var _jsxFileName = \"/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/components/shit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport moment from 'moment'; // Recommended for date manipulation\nimport 'moment-business-days'; // For business day calculations (optional, can implement manually)\n\n// You might need to configure moment-business-days to use your specific weekends\n// By default, it considers Saturday and Sunday as non-working days.\n// If your work week is different, you'd configure it like:\n// moment.updateLocale('en', {\n//     workingWeekdays: [1, 2, 3, 4, 5] // Monday to Friday\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateTaskForm() {\n  _s();\n  const [startDate, setStartDate] = useState('');\n  const [estimateHours, setEstimateHours] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [nonWorkingDays, setNonWorkingDays] = useState([]); // Array of 'YYYY-MM-DD' strings\n\n  // 1. Fetch non-working days when the component mounts\n  useEffect(() => {\n    const fetchNonWorkingDays = async () => {\n      try {\n        // Adjust this URL to your Spring Boot backend's API endpoint\n        const response = await fetch('http://localhost:8080/api/holidays');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        // Ensure dates are in a consistent format (e.g., 'YYYY-MM-DD')\n        setNonWorkingDays(data.map(dateStr => moment(dateStr).format('YYYY-MM-DD')));\n      } catch (error) {\n        console.error(\"Error fetching non-working days:\", error);\n        // Optionally, handle error state or show a message to the user\n      }\n    };\n    fetchNonWorkingDays();\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Helper function to check if a day is a non-working day\n  const isNonWorkingDay = useCallback(date => {\n    const formattedDate = date.format('YYYY-MM-DD');\n    return nonWorkingDays.includes(formattedDate);\n  }, [nonWorkingDays]);\n\n  // 2. Calculate end date whenever start date or estimate hours change\n  useEffect(() => {\n    if (startDate && estimateHours && !isNaN(parseFloat(estimateHours))) {\n      const startMoment = moment(startDate);\n      const totalHours = parseFloat(estimateHours);\n      if (!startMoment.isValid() || totalHours <= 0) {\n        setEndDate('');\n        return;\n      }\n\n      // Assume an 8-hour workday for simplicity\n      const hoursPerDay = 8;\n      let remainingHours = totalHours;\n      let currentDay = startMoment.clone();\n      while (remainingHours > 0) {\n        if (!isNonWorkingDay(currentDay)) {\n          // This is a working day, deduct hours\n          // If remaining hours fit within this day, we're done\n          if (remainingHours <= hoursPerDay) {\n            remainingHours = 0; // Task finishes on this day\n          } else {\n            // Task takes more than this day, move to next\n            remainingHours -= hoursPerDay;\n          }\n        }\n        if (remainingHours > 0) {\n          // Only move to next day if task isn't complete\n          currentDay.add(1, 'days');\n        }\n      }\n      setEndDate(currentDay.format('YYYY-MM-DD'));\n    } else {\n      setEndDate('');\n    }\n  }, [startDate, estimateHours, isNonWorkingDay]); // Recalculate if these change\n\n  const handleStartDateChange = e => {\n    setStartDate(e.target.value);\n  };\n  const handleEstimateHoursChange = e => {\n    setEstimateHours(e.target.value);\n  };\n  const handleEndDateManualChange = e => {\n    // If the user manually changes the end date, let that take precedence\n    setEndDate(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Here you would send startDate, estimateHours, and the final endDate\n    // to your Spring Boot backend for saving and final validation.\n    console.log({\n      startDate,\n      estimateHours,\n      endDate\n    });\n    alert(`Task created! Start: ${startDate}, Estimate: ${estimateHours}hrs, End: ${endDate}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '600px',\n      margin: '50px auto',\n      padding: '20px',\n      border: '1px solid #ccc',\n      borderRadius: '8px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: handleStartDateChange,\n          style: {\n            width: '100%',\n            padding: '8px'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Original Estimate (hours):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: estimateHours,\n          onChange: handleEstimateHoursChange,\n          style: {\n            width: '100%',\n            padding: '8px'\n          },\n          min: \"1\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Calculated/Due Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: handleEndDateManualChange,\n          style: {\n            width: '100%',\n            padding: '8px',\n            backgroundColor: '#f0f0f0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateTaskForm, \"q3RAyToMR1WNR1cvqhfErsU5cls=\");\n_c = CreateTaskForm;\nexport default CreateTaskForm;\nvar _c;\n$RefreshReg$(_c, \"CreateTaskForm\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","moment","jsxDEV","_jsxDEV","CreateTaskForm","_s","startDate","setStartDate","estimateHours","setEstimateHours","endDate","setEndDate","nonWorkingDays","setNonWorkingDays","fetchNonWorkingDays","response","fetch","ok","Error","status","data","json","map","dateStr","format","error","console","isNonWorkingDay","date","formattedDate","includes","isNaN","parseFloat","startMoment","totalHours","isValid","hoursPerDay","remainingHours","currentDay","clone","add","handleStartDateChange","e","target","value","handleEstimateHoursChange","handleEndDateManualChange","handleSubmit","preventDefault","log","alert","style","maxWidth","margin","padding","border","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","type","onChange","width","required","min","backgroundColor","color","cursor","_c","$RefreshReg$"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/components/shit.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport moment from 'moment'; // Recommended for date manipulation\nimport 'moment-business-days'; // For business day calculations (optional, can implement manually)\n\n// You might need to configure moment-business-days to use your specific weekends\n// By default, it considers Saturday and Sunday as non-working days.\n// If your work week is different, you'd configure it like:\n// moment.updateLocale('en', {\n//     workingWeekdays: [1, 2, 3, 4, 5] // Monday to Friday\n// });\n\n\nfunction CreateTaskForm() {\n    const [startDate, setStartDate] = useState('');\n    const [estimateHours, setEstimateHours] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [nonWorkingDays, setNonWorkingDays] = useState([]); // Array of 'YYYY-MM-DD' strings\n\n    // 1. Fetch non-working days when the component mounts\n    useEffect(() => {\n        const fetchNonWorkingDays = async () => {\n            try {\n                // Adjust this URL to your Spring Boot backend's API endpoint\n                const response = await fetch('http://localhost:8080/api/holidays');\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                // Ensure dates are in a consistent format (e.g., 'YYYY-MM-DD')\n                setNonWorkingDays(data.map(dateStr => moment(dateStr).format('YYYY-MM-DD')));\n            } catch (error) {\n                console.error(\"Error fetching non-working days:\", error);\n                // Optionally, handle error state or show a message to the user\n            }\n        };\n\n        fetchNonWorkingDays();\n    }, []); // Empty dependency array means this runs once on mount\n\n    // Helper function to check if a day is a non-working day\n    const isNonWorkingDay = useCallback((date) => {\n        const formattedDate = date.format('YYYY-MM-DD');\n        return nonWorkingDays.includes(formattedDate);\n    }, [nonWorkingDays]);\n\n\n    // 2. Calculate end date whenever start date or estimate hours change\n    useEffect(() => {\n        if (startDate && estimateHours && !isNaN(parseFloat(estimateHours))) {\n            const startMoment = moment(startDate);\n            const totalHours = parseFloat(estimateHours);\n\n            if (!startMoment.isValid() || totalHours <= 0) {\n                setEndDate('');\n                return;\n            }\n\n            // Assume an 8-hour workday for simplicity\n            const hoursPerDay = 8;\n            let remainingHours = totalHours;\n            let currentDay = startMoment.clone();\n\n            while (remainingHours > 0) {\n                if (!isNonWorkingDay(currentDay)) {\n                    // This is a working day, deduct hours\n                    // If remaining hours fit within this day, we're done\n                    if (remainingHours <= hoursPerDay) {\n                        remainingHours = 0; // Task finishes on this day\n                    } else {\n                        // Task takes more than this day, move to next\n                        remainingHours -= hoursPerDay;\n                    }\n                }\n                \n                if (remainingHours > 0) { // Only move to next day if task isn't complete\n                    currentDay.add(1, 'days');\n                }\n            }\n            setEndDate(currentDay.format('YYYY-MM-DD'));\n        } else {\n            setEndDate('');\n        }\n    }, [startDate, estimateHours, isNonWorkingDay]); // Recalculate if these change\n\n    const handleStartDateChange = (e) => {\n        setStartDate(e.target.value);\n    };\n\n    const handleEstimateHoursChange = (e) => {\n        setEstimateHours(e.target.value);\n    };\n\n    const handleEndDateManualChange = (e) => {\n        // If the user manually changes the end date, let that take precedence\n        setEndDate(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Here you would send startDate, estimateHours, and the final endDate\n        // to your Spring Boot backend for saving and final validation.\n        console.log({\n            startDate,\n            estimateHours,\n            endDate\n        });\n        alert(`Task created! Start: ${startDate}, Estimate: ${estimateHours}hrs, End: ${endDate}`);\n    };\n\n    return (\n        <div style={{ maxWidth: '600px', margin: '50px auto', padding: '20px', border: '1px solid #ccc', borderRadius: '8px' }}>\n            <h2>Create Task</h2>\n            <form onSubmit={handleSubmit}>\n                <div style={{ marginBottom: '15px' }}>\n                    <label>Start Date:</label>\n                    <input type=\"date\" value={startDate} onChange={handleStartDateChange} style={{ width: '100%', padding: '8px' }} required />\n                </div>\n                <div style={{ marginBottom: '15px' }}>\n                    <label>Original Estimate (hours):</label>\n                    <input type=\"number\" value={estimateHours} onChange={handleEstimateHoursChange} style={{ width: '100%', padding: '8px' }} min=\"1\" required />\n                </div>\n                <div style={{ marginBottom: '15px' }}>\n                    <label>Calculated/Due Date:</label>\n                    <input type=\"date\" value={endDate} onChange={handleEndDateManualChange} style={{ width: '100%', padding: '8px', backgroundColor: '#f0f0f0' }} />\n                </div>\n                <button type=\"submit\" style={{ padding: '10px 20px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n                    Create Task\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateTaskForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}