{"ast":null,"code":"/**\n * Holiday Service for frontend API calls\n * Handles communication with backend holiday endpoints\n */const API_BASE_URL=process.env.REACT_APP_API_URL||'';class HolidayService{/**\n     * Fetch all holidays from backend\n     */static async fetchHolidays(){try{console.log('HolidayService: Fetching all holidays');const response=await fetch(\"\".concat(API_BASE_URL,\"/holidays\"));if(!response.ok){throw new Error(\"Failed to fetch holidays: \".concat(response.status));}const holidays=await response.json();console.log(\"HolidayService: Fetched \".concat(holidays.length,\" holidays\"));return holidays;}catch(error){console.error('HolidayService: Error fetching holidays:',error);return[];}}/**\n     * Fetch holidays within a date range\n     */static async fetchHolidaysInRange(startDate,endDate){try{console.log(\"HolidayService: Fetching holidays from \".concat(startDate,\" to \").concat(endDate));const response=await fetch(\"\".concat(API_BASE_URL,\"/holidays/range?start=\").concat(startDate,\"&end=\").concat(endDate));if(!response.ok){throw new Error(\"Failed to fetch holidays in range: \".concat(response.status));}const holidays=await response.json();console.log(\"HolidayService: Fetched \".concat(holidays.length,\" holidays in range\"));return holidays;}catch(error){console.error('HolidayService: Error fetching holidays in range:',error);return[];}}/**\n     * Calculate end date based on start date and estimate days\n     */static async calculateEndDate(startDate,estimateDays){try{console.log(\"HolidayService: Calculating end date for start=\".concat(startDate,\", estimate=\").concat(estimateDays,\" days\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/tasks/calculate-end-date\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({startDate:startDate,estimateDays:estimateDays})});if(!response.ok){throw new Error(\"Failed to calculate end date: \".concat(response.status));}const result=await response.json();console.log('HolidayService: End date calculation result:',result);return result;}catch(error){console.error('HolidayService: Error calculating end date:',error);return null;}}/**\n     * Validate user-selected end date\n     */static async validateEndDate(startDate,estimateDays,selectedEndDate){try{console.log(\"HolidayService: Validating end date - start=\".concat(startDate,\", estimate=\").concat(estimateDays,\", selected=\").concat(selectedEndDate));const response=await fetch(\"\".concat(API_BASE_URL,\"/tasks/validate-end-date?startDate=\").concat(startDate,\"&estimateDays=\").concat(estimateDays,\"&selectedEndDate=\").concat(selectedEndDate));if(!response.ok){throw new Error(\"Failed to validate end date: \".concat(response.status));}const result=await response.json();console.log('HolidayService: Validation result:',result);return result;}catch(error){console.error('HolidayService: Error validating end date:',error);return{isValid:false,message:'Validation error'};}}/**\n     * Check if a specific date is a holiday\n     */static async isHoliday(date){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/holidays/check?date=\").concat(date));if(!response.ok){throw new Error(\"Failed to check holiday: \".concat(response.status));}const isHoliday=await response.json();return isHoliday;}catch(error){console.error('HolidayService: Error checking holiday:',error);return false;}}/**\n     * Check if a specific date is a working day\n     */static async isWorkingDay(date){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/holidays/working-day?date=\").concat(date));if(!response.ok){throw new Error(\"Failed to check working day: \".concat(response.status));}const isWorkingDay=await response.json();return isWorkingDay;}catch(error){console.error('HolidayService: Error checking working day:',error);return true;// Default to true if can't check\n}}/**\n     * Format holidays for calendar display\n     */static formatHolidaysForCalendar(holidays){return holidays.reduce((acc,holiday)=>{acc[holiday.holidayDate]={name:holiday.holidayName,type:holiday.holidayType,isWorkingDay:holiday.isWorkingDay,description:holiday.description};return acc;},{});}/**\n     * Get holiday info for a specific date\n     */static getHolidayInfo(holidays,date){return holidays.find(holiday=>holiday.holidayDate===date);}}export default HolidayService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","HolidayService","fetchHolidays","console","log","response","fetch","concat","ok","Error","status","holidays","json","length","error","fetchHolidaysInRange","startDate","endDate","calculateEndDate","estimateDays","method","headers","body","JSON","stringify","result","validateEndDate","selectedEndDate","isValid","message","isHoliday","date","isWorkingDay","formatHolidaysForCalendar","reduce","acc","holiday","holidayDate","name","holidayName","type","holidayType","description","getHolidayInfo","find"],"sources":["/home/abd_faiyaz/ontik_project_1/React_Frontend/src/services/HolidayService.js"],"sourcesContent":["/**\n * Holiday Service for frontend API calls\n * Handles communication with backend holiday endpoints\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass HolidayService {\n    /**\n     * Fetch all holidays from backend\n     */\n    static async fetchHolidays() {\n        try {\n            console.log('HolidayService: Fetching all holidays');\n            const response = await fetch(`${API_BASE_URL}/holidays`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch holidays: ${response.status}`);\n            }\n            const holidays = await response.json();\n            console.log(`HolidayService: Fetched ${holidays.length} holidays`);\n            return holidays;\n        } catch (error) {\n            console.error('HolidayService: Error fetching holidays:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Fetch holidays within a date range\n     */\n    static async fetchHolidaysInRange(startDate, endDate) {\n        try {\n            console.log(`HolidayService: Fetching holidays from ${startDate} to ${endDate}`);\n            const response = await fetch(`${API_BASE_URL}/holidays/range?start=${startDate}&end=${endDate}`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch holidays in range: ${response.status}`);\n            }\n            const holidays = await response.json();\n            console.log(`HolidayService: Fetched ${holidays.length} holidays in range`);\n            return holidays;\n        } catch (error) {\n            console.error('HolidayService: Error fetching holidays in range:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Calculate end date based on start date and estimate days\n     */\n    static async calculateEndDate(startDate, estimateDays) {\n        try {\n            console.log(`HolidayService: Calculating end date for start=${startDate}, estimate=${estimateDays} days`);\n            const response = await fetch(`${API_BASE_URL}/tasks/calculate-end-date`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    startDate: startDate,\n                    estimateDays: estimateDays\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to calculate end date: ${response.status}`);\n            }\n\n            const result = await response.json();\n            console.log('HolidayService: End date calculation result:', result);\n            return result;\n        } catch (error) {\n            console.error('HolidayService: Error calculating end date:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Validate user-selected end date\n     */\n    static async validateEndDate(startDate, estimateDays, selectedEndDate) {\n        try {\n            console.log(`HolidayService: Validating end date - start=${startDate}, estimate=${estimateDays}, selected=${selectedEndDate}`);\n            const response = await fetch(\n                `${API_BASE_URL}/tasks/validate-end-date?startDate=${startDate}&estimateDays=${estimateDays}&selectedEndDate=${selectedEndDate}`\n            );\n\n            if (!response.ok) {\n                throw new Error(`Failed to validate end date: ${response.status}`);\n            }\n\n            const result = await response.json();\n            console.log('HolidayService: Validation result:', result);\n            return result;\n        } catch (error) {\n            console.error('HolidayService: Error validating end date:', error);\n            return { isValid: false, message: 'Validation error' };\n        }\n    }\n\n    /**\n     * Check if a specific date is a holiday\n     */\n    static async isHoliday(date) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/holidays/check?date=${date}`);\n            if (!response.ok) {\n                throw new Error(`Failed to check holiday: ${response.status}`);\n            }\n            const isHoliday = await response.json();\n            return isHoliday;\n        } catch (error) {\n            console.error('HolidayService: Error checking holiday:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Check if a specific date is a working day\n     */\n    static async isWorkingDay(date) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/holidays/working-day?date=${date}`);\n            if (!response.ok) {\n                throw new Error(`Failed to check working day: ${response.status}`);\n            }\n            const isWorkingDay = await response.json();\n            return isWorkingDay;\n        } catch (error) {\n            console.error('HolidayService: Error checking working day:', error);\n            return true; // Default to true if can't check\n        }\n    }\n\n    /**\n     * Format holidays for calendar display\n     */\n    static formatHolidaysForCalendar(holidays) {\n        return holidays.reduce((acc, holiday) => {\n            acc[holiday.holidayDate] = {\n                name: holiday.holidayName,\n                type: holiday.holidayType,\n                isWorkingDay: holiday.isWorkingDay,\n                description: holiday.description\n            };\n            return acc;\n        }, {});\n    }\n\n    /**\n     * Get holiday info for a specific date\n     */\n    static getHolidayInfo(holidays, date) {\n        return holidays.find(holiday => holiday.holidayDate === date);\n    }\n}\n\nexport default HolidayService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}