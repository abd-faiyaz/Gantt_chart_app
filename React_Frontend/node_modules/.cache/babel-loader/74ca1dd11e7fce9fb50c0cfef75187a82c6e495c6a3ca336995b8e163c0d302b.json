{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import HolidayService from'../services/HolidayService';/**\n * Custom hook for date calculations with holiday awareness\n */const useDateCalculation=()=>{const[holidays,setHolidays]=useState([]);const[calculatedEndDate,setCalculatedEndDate]=useState('');const[isCalculating,setIsCalculating]=useState(false);const[validationMessage,setValidationMessage]=useState('');// Fetch holidays on hook initialization\nuseEffect(()=>{const fetchHolidays=async()=>{try{const holidayData=await HolidayService.fetchHolidays();setHolidays(holidayData);console.log('useDateCalculation: Loaded holidays:',holidayData.length);}catch(error){console.error('useDateCalculation: Error loading holidays:',error);}};fetchHolidays();},[]);/**\n     * Calculate end date based on start date and estimate days\n     */const calculateEndDate=useCallback(async(startDate,estimateDays)=>{if(!startDate||!estimateDays||estimateDays<=0){setCalculatedEndDate('');return null;}setIsCalculating(true);setValidationMessage('');try{const result=await HolidayService.calculateEndDate(startDate,estimateDays);if(result&&result.calculatedEndDate){setCalculatedEndDate(result.calculatedEndDate);console.log('useDateCalculation: Calculated end date:',result.calculatedEndDate);return result.calculatedEndDate;}}catch(error){console.error('useDateCalculation: Error calculating end date:',error);setValidationMessage('Error calculating end date');}finally{setIsCalculating(false);}return null;},[]);/**\n     * Validate user-selected end date\n     */const validateEndDate=useCallback(async(startDate,estimateDays,selectedEndDate)=>{if(!startDate||!estimateDays||!selectedEndDate){setValidationMessage('');return true;}try{const result=await HolidayService.validateEndDate(startDate,estimateDays,selectedEndDate);if(result){setValidationMessage(result.isValid?'':result.message);return result.isValid;}}catch(error){console.error('useDateCalculation: Error validating end date:',error);setValidationMessage('Error validating end date');}return false;},[]);/**\n     * Check if a date is a holiday\n     */const isHoliday=useCallback(date=>{return holidays.some(holiday=>holiday.holidayDate===date);},[holidays]);/**\n     * Check if a date is a non-working holiday\n     */const isNonWorkingHoliday=useCallback(date=>{const holiday=holidays.find(h=>h.holidayDate===date);return holiday&&!holiday.isWorkingDay;},[holidays]);/**\n     * Get holiday information for a specific date\n     */const getHolidayInfo=useCallback(date=>{return holidays.find(holiday=>holiday.holidayDate===date);},[holidays]);/**\n     * Check if a date is a weekend\n     */const isWeekend=useCallback(date=>{const dayOfWeek=new Date(date).getDay();return dayOfWeek===0||dayOfWeek===6;// Sunday = 0, Saturday = 6\n},[]);/**\n     * Check if a date should be disabled (weekend or non-working holiday)\n     */const shouldDisableDate=useCallback(date=>{return isWeekend(date)||isNonWorkingHoliday(date);},[isWeekend,isNonWorkingHoliday]);/**\n     * Get CSS class for date styling in calendar\n     */const getDateClassName=useCallback(date=>{const dateStr=date.toISOString().split('T')[0];if(isNonWorkingHoliday(dateStr)){return'holiday-date non-working';}if(isHoliday(dateStr)){return'holiday-date working';}if(isWeekend(dateStr)){return'weekend-date';}return'working-date';},[isHoliday,isNonWorkingHoliday,isWeekend]);return{holidays,calculatedEndDate,isCalculating,validationMessage,calculateEndDate,validateEndDate,isHoliday,isNonWorkingHoliday,getHolidayInfo,isWeekend,shouldDisableDate,getDateClassName};};export default useDateCalculation;","map":{"version":3,"names":["useState","useEffect","useCallback","HolidayService","useDateCalculation","holidays","setHolidays","calculatedEndDate","setCalculatedEndDate","isCalculating","setIsCalculating","validationMessage","setValidationMessage","fetchHolidays","holidayData","console","log","length","error","calculateEndDate","startDate","estimateDays","result","validateEndDate","selectedEndDate","isValid","message","isHoliday","date","some","holiday","holidayDate","isNonWorkingHoliday","find","h","isWorkingDay","getHolidayInfo","isWeekend","dayOfWeek","Date","getDay","shouldDisableDate","getDateClassName","dateStr","toISOString","split"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/hooks/useDateCalculation.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport HolidayService from '../services/HolidayService';\n\n/**\n * Custom hook for date calculations with holiday awareness\n */\nconst useDateCalculation = () => {\n    const [holidays, setHolidays] = useState([]);\n    const [calculatedEndDate, setCalculatedEndDate] = useState('');\n    const [isCalculating, setIsCalculating] = useState(false);\n    const [validationMessage, setValidationMessage] = useState('');\n\n    // Fetch holidays on hook initialization\n    useEffect(() => {\n        const fetchHolidays = async () => {\n            try {\n                const holidayData = await HolidayService.fetchHolidays();\n                setHolidays(holidayData);\n                console.log('useDateCalculation: Loaded holidays:', holidayData.length);\n            } catch (error) {\n                console.error('useDateCalculation: Error loading holidays:', error);\n            }\n        };\n\n        fetchHolidays();\n    }, []);\n\n    /**\n     * Calculate end date based on start date and estimate days\n     */\n    const calculateEndDate = useCallback(async (startDate, estimateDays) => {\n        if (!startDate || !estimateDays || estimateDays <= 0) {\n            setCalculatedEndDate('');\n            return null;\n        }\n\n        setIsCalculating(true);\n        setValidationMessage('');\n\n        try {\n            const result = await HolidayService.calculateEndDate(startDate, estimateDays);\n            if (result && result.calculatedEndDate) {\n                setCalculatedEndDate(result.calculatedEndDate);\n                console.log('useDateCalculation: Calculated end date:', result.calculatedEndDate);\n                return result.calculatedEndDate;\n            }\n        } catch (error) {\n            console.error('useDateCalculation: Error calculating end date:', error);\n            setValidationMessage('Error calculating end date');\n        } finally {\n            setIsCalculating(false);\n        }\n\n        return null;\n    }, []);\n\n    /**\n     * Validate user-selected end date\n     */\n    const validateEndDate = useCallback(async (startDate, estimateDays, selectedEndDate) => {\n        if (!startDate || !estimateDays || !selectedEndDate) {\n            setValidationMessage('');\n            return true;\n        }\n\n        try {\n            const result = await HolidayService.validateEndDate(startDate, estimateDays, selectedEndDate);\n            if (result) {\n                setValidationMessage(result.isValid ? '' : result.message);\n                return result.isValid;\n            }\n        } catch (error) {\n            console.error('useDateCalculation: Error validating end date:', error);\n            setValidationMessage('Error validating end date');\n        }\n\n        return false;\n    }, []);\n\n    /**\n     * Check if a date is a holiday\n     */\n    const isHoliday = useCallback((date) => {\n        return holidays.some(holiday => holiday.holidayDate === date);\n    }, [holidays]);\n\n    /**\n     * Check if a date is a non-working holiday\n     */\n    const isNonWorkingHoliday = useCallback((date) => {\n        const holiday = holidays.find(h => h.holidayDate === date);\n        return holiday && !holiday.isWorkingDay;\n    }, [holidays]);\n\n    /**\n     * Get holiday information for a specific date\n     */\n    const getHolidayInfo = useCallback((date) => {\n        return holidays.find(holiday => holiday.holidayDate === date);\n    }, [holidays]);\n\n    /**\n     * Check if a date is a weekend\n     */\n    const isWeekend = useCallback((date) => {\n        const dayOfWeek = new Date(date).getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6; // Sunday = 0, Saturday = 6\n    }, []);\n\n    /**\n     * Check if a date should be disabled (weekend or non-working holiday)\n     */\n    const shouldDisableDate = useCallback((date) => {\n        return isWeekend(date) || isNonWorkingHoliday(date);\n    }, [isWeekend, isNonWorkingHoliday]);\n\n    /**\n     * Get CSS class for date styling in calendar\n     */\n    const getDateClassName = useCallback((date) => {\n        const dateStr = date.toISOString().split('T')[0];\n        \n        if (isNonWorkingHoliday(dateStr)) {\n            return 'holiday-date non-working';\n        }\n        if (isHoliday(dateStr)) {\n            return 'holiday-date working';\n        }\n        if (isWeekend(dateStr)) {\n            return 'weekend-date';\n        }\n        return 'working-date';\n    }, [isHoliday, isNonWorkingHoliday, isWeekend]);\n\n    return {\n        holidays,\n        calculatedEndDate,\n        isCalculating,\n        validationMessage,\n        calculateEndDate,\n        validateEndDate,\n        isHoliday,\n        isNonWorkingHoliday,\n        getHolidayInfo,\n        isWeekend,\n        shouldDisableDate,\n        getDateClassName\n    };\n};\n\nexport default useDateCalculation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}