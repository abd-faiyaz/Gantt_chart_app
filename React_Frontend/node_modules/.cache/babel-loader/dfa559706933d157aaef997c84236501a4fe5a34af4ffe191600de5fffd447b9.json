{"ast":null,"code":"var _jsxFileName = \"/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/modules/TaskView.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import TaskCard from \"../components/TaskCard\";\n// import \"./TaskView.css\"\n//\n//\n// const TaskView = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [showConfirm, setShowConfirm] = useState(false);\n//   const [taskToDelete, setTaskToDelete] = useState(null);\n//   const navigate = useNavigate();\n//\n//   useEffect(() => {\n//     // Placeholder: Replace with API call in the future\n//     //TODO: Replace this with your API call to fetch all tasks\n//     const fetchedTasks = [\n//       {\n//         title: \"Complete project documentation\",\n//         task_description: \"Write all API documentation for the backend services\",\n//         assignee: \"John Doe\",\n//         start_date: \"2023-10-15\",\n//         estimation: \"8\",\n//         due_date: \"2023-11-15\",\n//         status: \"In Progress\",\n//         priority: \"High\",\n//         type: \"Task\"\n//       },\n//       {\n//         title: \"Implement user authentication\",\n//         task_description: \"Develop JWT-based authentication for the API\",\n//         assignee: \"Alice Smith\",\n//         start_date: \"2023-10-10\",\n//         estimation: \"12\",\n//         due_date: \"2023-10-25\",\n//         status: \"Completed\",\n//         priority: \"Critical\",\n//         type: \"Development\"\n//       },\n//       {\n//         title: \"Database schema optimization\",\n//         task_description: \"Review and optimize SQL queries and indexes\",\n//         assignee: \"Bob Johnson\",\n//         start_date: \"2023-10-20\",\n//         estimation: \"5\",\n//         due_date: \"2023-11-05\",\n//         status: \"Not Started\",\n//         priority: \"Medium\",\n//         type: \"Database\"\n//       },\n//       {\n//         title: \"Frontend dashboard redesign\",\n//         task_description: \"Update UI components for the admin dashboard\",\n//         assignee: \"Emily Davis\",\n//         start_date: \"2023-11-01\",\n//         estimation: \"10\",\n//         due_date: \"2023-11-20\",\n//         status: \"In Progress\",\n//         priority: \"High\",\n//         type: \"UI/UX\"\n//       },\n//       {\n//         title: \"Automated testing setup\",\n//         task_description: \"Configure Jest and Cypress for unit and E2E testing\",\n//         assignee: \"Michael Brown\",\n//         start_date: \"2023-10-05\",\n//         estimation: \"6\",\n//         due_date: \"2023-10-30\",\n//         status: \"Completed\",\n//         priority: \"Medium\",\n//         type: \"Testing\"\n//       }\n//     ];\n//     setTasks(fetchedTasks);\n//   }, []);\n//\n//   const handleAddTask = () => {\n//     navigate(\"/add-task\");\n//   };\n//\n//   const handleDeleteClick = (task) => {\n//     setTaskToDelete(task);\n//     setShowConfirm(true);\n//   };\n//\n//   const handleConfirmDelete = () => {\n//     setTasks(tasks.filter(t => t !== taskToDelete));\n//     setShowConfirm(false);\n//     setTaskToDelete(null);\n//   };\n//\n//   const handleCancelDelete = () => {\n//     setShowConfirm(false);\n//     setTaskToDelete(null);\n//   };\n//\n//   return (\n//     <div className=\"task-view\">\n//       <div className=\"table-scroll-container\">\n//         <table className=\"task-list-table\">\n//           <thead>\n//             <tr>\n//               <th>Epic Title </th>\n//               <th>Type</th>\n//               <th>Key</th>\n//               <th>Summary</th>\n//               <th>Status</th>\n//               <th>Comments</th>\n//               <th>Sprint</th>\n//               <th>Assignee</th>\n//               <th>Due date</th>\n//               <th>Label</th>\n//\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task, idx) => (\n//               <TaskCard\n//                 key={idx}\n//                 task={task}\n//                 onDelete={() => handleDeleteClick(task)}\n//               />\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//       <div className=\"create-row\">\n//         <button className=\"create-btn\" onClick={handleAddTask}>+ Create</button>\n//       </div>\n//       {showConfirm && (\n//         <div className=\"custom-confirm-overlay\">\n//           <div className=\"custom-confirm-box\">\n//             <p>Are you sure you want to delete this task?</p>\n//             <div className=\"confirm-buttons\">\n//               <button className=\"button\" onClick={handleConfirmDelete}>OK</button>\n//               <button className=\"button\" onClick={handleCancelDelete}>Cancel</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default TaskView;\n// Import React and state/effect hooks\nimport React, { useEffect, useState } from \"react\";\n// Import navigation from React Router\nimport { useNavigate } from \"react-router-dom\";\n// Import the API helpers for task operations\nimport { getAllTasks, deleteTask } from \"../api/taskApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskView = () => {\n  _s();\n  // State to hold the list of tasks\n  const [tasks, setTasks] = useState([]);\n  // State to control the confirm delete modal visibility\n  const [showConfirm, setShowConfirm] = useState(false);\n  // State to remember which task is being considered for deletion\n  const [taskToDelete, setTaskToDelete] = useState(null);\n\n  // Get navigation function from React Router\n  const navigate = useNavigate();\n\n  // Fetch all tasks from backend when component mounts\n  useEffect(() => {\n    // Call the API helper to fetch all tasks\n    getAllTasks().then(setTasks);\n  }, []);\n\n  // Handle clicking the \"Add Task\" button\n  const handleAddTask = () => {\n    // Navigate to the add-task page (TaskForm)\n    navigate(\"/add-task\");\n  };\n\n  // Handle clicking the \"Delete\" button for a specific task\n  const handleDeleteClick = task => {\n    // Set which task is being considered for deletion\n    setTaskToDelete(task);\n    // Show the confirmation modal\n    setShowConfirm(true);\n  };\n\n  // Confirm deletion after user agrees in modal\n  const handleConfirmDelete = async () => {\n    // Call backend API to delete the task\n    const success = await deleteTask(taskToDelete.id);\n    if (success) {\n      // If successful, remove the task from the list in state\n      setTasks(tasks.filter(t => t.id !== taskToDelete.id));\n    }\n    // Hide the modal and clear the task to delete\n    setShowConfirm(false);\n    setTaskToDelete(null);\n  };\n\n  // Cancel the delete operation\n  const handleCancelDelete = () => {\n    // Simply hide the confirmation modal and reset the task to delete\n    setShowConfirm(false);\n    setTaskToDelete(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-scroll-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"task-list-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Assignee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Due date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.assignee\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.due_date || task.endDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate(\"/add-task\", {\n                  state: {\n                    task\n                  }\n                }),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteClick(task),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-row\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-btn\",\n        onClick: handleAddTask,\n        children: \"+ Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), showConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-confirm-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-confirm-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this task?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirm-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleConfirmDelete,\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: handleCancelDelete,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 7\n  }, this);\n};\n_s(TaskView, \"2EiSHqFg1dLH4EH5s2KPlBY1jFE=\", false, function () {\n  return [useNavigate];\n});\n_c = TaskView;\nexport default TaskView;\nvar _c;\n$RefreshReg$(_c, \"TaskView\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","getAllTasks","deleteTask","jsxDEV","_jsxDEV","TaskView","_s","tasks","setTasks","showConfirm","setShowConfirm","taskToDelete","setTaskToDelete","navigate","then","handleAddTask","handleDeleteClick","task","handleConfirmDelete","success","id","filter","t","handleCancelDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","status","assignee","due_date","endDate","onClick","state","_c","$RefreshReg$"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/modules/TaskView.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import TaskCard from \"../components/TaskCard\";\n// import \"./TaskView.css\"\n//\n//\n// const TaskView = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [showConfirm, setShowConfirm] = useState(false);\n//   const [taskToDelete, setTaskToDelete] = useState(null);\n//   const navigate = useNavigate();\n//\n//   useEffect(() => {\n//     // Placeholder: Replace with API call in the future\n//     //TODO: Replace this with your API call to fetch all tasks\n//     const fetchedTasks = [\n//       {\n//         title: \"Complete project documentation\",\n//         task_description: \"Write all API documentation for the backend services\",\n//         assignee: \"John Doe\",\n//         start_date: \"2023-10-15\",\n//         estimation: \"8\",\n//         due_date: \"2023-11-15\",\n//         status: \"In Progress\",\n//         priority: \"High\",\n//         type: \"Task\"\n//       },\n//       {\n//         title: \"Implement user authentication\",\n//         task_description: \"Develop JWT-based authentication for the API\",\n//         assignee: \"Alice Smith\",\n//         start_date: \"2023-10-10\",\n//         estimation: \"12\",\n//         due_date: \"2023-10-25\",\n//         status: \"Completed\",\n//         priority: \"Critical\",\n//         type: \"Development\"\n//       },\n//       {\n//         title: \"Database schema optimization\",\n//         task_description: \"Review and optimize SQL queries and indexes\",\n//         assignee: \"Bob Johnson\",\n//         start_date: \"2023-10-20\",\n//         estimation: \"5\",\n//         due_date: \"2023-11-05\",\n//         status: \"Not Started\",\n//         priority: \"Medium\",\n//         type: \"Database\"\n//       },\n//       {\n//         title: \"Frontend dashboard redesign\",\n//         task_description: \"Update UI components for the admin dashboard\",\n//         assignee: \"Emily Davis\",\n//         start_date: \"2023-11-01\",\n//         estimation: \"10\",\n//         due_date: \"2023-11-20\",\n//         status: \"In Progress\",\n//         priority: \"High\",\n//         type: \"UI/UX\"\n//       },\n//       {\n//         title: \"Automated testing setup\",\n//         task_description: \"Configure Jest and Cypress for unit and E2E testing\",\n//         assignee: \"Michael Brown\",\n//         start_date: \"2023-10-05\",\n//         estimation: \"6\",\n//         due_date: \"2023-10-30\",\n//         status: \"Completed\",\n//         priority: \"Medium\",\n//         type: \"Testing\"\n//       }\n//     ];\n//     setTasks(fetchedTasks);\n//   }, []);\n//\n//   const handleAddTask = () => {\n//     navigate(\"/add-task\");\n//   };\n//\n//   const handleDeleteClick = (task) => {\n//     setTaskToDelete(task);\n//     setShowConfirm(true);\n//   };\n//\n//   const handleConfirmDelete = () => {\n//     setTasks(tasks.filter(t => t !== taskToDelete));\n//     setShowConfirm(false);\n//     setTaskToDelete(null);\n//   };\n//\n//   const handleCancelDelete = () => {\n//     setShowConfirm(false);\n//     setTaskToDelete(null);\n//   };\n//\n//   return (\n//     <div className=\"task-view\">\n//       <div className=\"table-scroll-container\">\n//         <table className=\"task-list-table\">\n//           <thead>\n//             <tr>\n//               <th>Epic Title </th>\n//               <th>Type</th>\n//               <th>Key</th>\n//               <th>Summary</th>\n//               <th>Status</th>\n//               <th>Comments</th>\n//               <th>Sprint</th>\n//               <th>Assignee</th>\n//               <th>Due date</th>\n//               <th>Label</th>\n//\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {tasks.map((task, idx) => (\n//               <TaskCard\n//                 key={idx}\n//                 task={task}\n//                 onDelete={() => handleDeleteClick(task)}\n//               />\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//       <div className=\"create-row\">\n//         <button className=\"create-btn\" onClick={handleAddTask}>+ Create</button>\n//       </div>\n//       {showConfirm && (\n//         <div className=\"custom-confirm-overlay\">\n//           <div className=\"custom-confirm-box\">\n//             <p>Are you sure you want to delete this task?</p>\n//             <div className=\"confirm-buttons\">\n//               <button className=\"button\" onClick={handleConfirmDelete}>OK</button>\n//               <button className=\"button\" onClick={handleCancelDelete}>Cancel</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default TaskView;\n// Import React and state/effect hooks\nimport React, { useEffect, useState } from \"react\";\n// Import navigation from React Router\nimport { useNavigate } from \"react-router-dom\";\n// Import the API helpers for task operations\nimport { getAllTasks, deleteTask } from \"../api/taskApi\";\n\nconst TaskView = () => {\n  // State to hold the list of tasks\n  const [tasks, setTasks] = useState([]);\n  // State to control the confirm delete modal visibility\n  const [showConfirm, setShowConfirm] = useState(false);\n  // State to remember which task is being considered for deletion\n  const [taskToDelete, setTaskToDelete] = useState(null);\n\n  // Get navigation function from React Router\n  const navigate = useNavigate();\n\n  // Fetch all tasks from backend when component mounts\n  useEffect(() => {\n    // Call the API helper to fetch all tasks\n    getAllTasks().then(setTasks);\n  }, []);\n\n  // Handle clicking the \"Add Task\" button\n  const handleAddTask = () => {\n    // Navigate to the add-task page (TaskForm)\n    navigate(\"/add-task\");\n  };\n\n  // Handle clicking the \"Delete\" button for a specific task\n  const handleDeleteClick = (task) => {\n    // Set which task is being considered for deletion\n    setTaskToDelete(task);\n    // Show the confirmation modal\n    setShowConfirm(true);\n  };\n\n  // Confirm deletion after user agrees in modal\n  const handleConfirmDelete = async () => {\n    // Call backend API to delete the task\n    const success = await deleteTask(taskToDelete.id);\n    if (success) {\n      // If successful, remove the task from the list in state\n      setTasks(tasks.filter((t) => t.id !== taskToDelete.id));\n    }\n    // Hide the modal and clear the task to delete\n    setShowConfirm(false);\n    setTaskToDelete(null);\n  };\n\n  // Cancel the delete operation\n  const handleCancelDelete = () => {\n    // Simply hide the confirmation modal and reset the task to delete\n    setShowConfirm(false);\n    setTaskToDelete(null);\n  };\n\n  return (\n      <div className=\"task-view\">\n        {/* Task Table */}\n        <div className=\"table-scroll-container\">\n          <table className=\"task-list-table\">\n            <thead>\n            <tr>\n              <th>Title</th>\n              <th>Status</th>\n              <th>Assignee</th>\n              <th>Due date</th>\n              <th>Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {/* Render each task as a row */}\n            {tasks.map((task) => (\n                <tr key={task.id}>\n                  <td>{task.title}</td>\n                  <td>{task.status}</td>\n                  <td>{task.assignee}</td>\n                  <td>{task.due_date || task.endDate}</td>\n                  <td>\n                    {/* Button to edit (navigate to TaskForm with state) */}\n                    <button\n                        onClick={() => navigate(\"/add-task\", { state: { task } })}\n                    >\n                      Edit\n                    </button>\n                    {/* Button to delete (show confirm modal) */}\n                    <button onClick={() => handleDeleteClick(task)}>Delete</button>\n                  </td>\n                </tr>\n            ))}\n            </tbody>\n          </table>\n        </div>\n        {/* Button to add a new task */}\n        <div className=\"create-row\">\n          <button className=\"create-btn\" onClick={handleAddTask}>\n            + Create\n          </button>\n        </div>\n        {/* Confirmation modal for deletion */}\n        {showConfirm && (\n            <div className=\"custom-confirm-overlay\">\n              <div className=\"custom-confirm-box\">\n                <p>Are you sure you want to delete this task?</p>\n                <div className=\"confirm-buttons\">\n                  <button className=\"button\" onClick={handleConfirmDelete}>\n                    OK\n                  </button>\n                  <button className=\"button\" onClick={handleCancelDelete}>\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n        )}\n      </div>\n  );\n};\n\nexport default TaskView;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}