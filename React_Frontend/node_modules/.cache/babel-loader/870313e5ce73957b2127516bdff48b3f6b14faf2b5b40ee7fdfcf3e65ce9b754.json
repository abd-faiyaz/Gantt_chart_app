{"ast":null,"code":"/**\n * Holiday Service for frontend API calls\n * Handles communication with backend holiday endpoints\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass HolidayService {\n  /**\n   * Fetch all holidays from backend\n   */\n  static async fetchHolidays() {\n    try {\n      console.log('HolidayService: Fetching all holidays');\n      const response = await fetch(`${API_BASE_URL}/holidays`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch holidays: ${response.status}`);\n      }\n      const holidays = await response.json();\n      console.log(`HolidayService: Fetched ${holidays.length} holidays`);\n      return holidays;\n    } catch (error) {\n      console.error('HolidayService: Error fetching holidays:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Fetch holidays within a date range\n   */\n  static async fetchHolidaysInRange(startDate, endDate) {\n    try {\n      console.log(`HolidayService: Fetching holidays from ${startDate} to ${endDate}`);\n      const response = await fetch(`${API_BASE_URL}/holidays/range?start=${startDate}&end=${endDate}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch holidays in range: ${response.status}`);\n      }\n      const holidays = await response.json();\n      console.log(`HolidayService: Fetched ${holidays.length} holidays in range`);\n      return holidays;\n    } catch (error) {\n      console.error('HolidayService: Error fetching holidays in range:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Calculate end date based on start date and estimate days\n   */\n  static async calculateEndDate(startDate, estimateDays) {\n    try {\n      console.log(`HolidayService: Calculating end date for start=${startDate}, estimate=${estimateDays} days`);\n      const response = await fetch(`${API_BASE_URL}/tasks/calculate-end-date`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          startDate: startDate,\n          estimateDays: estimateDays\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to calculate end date: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('HolidayService: End date calculation result:', result);\n      return result;\n    } catch (error) {\n      console.error('HolidayService: Error calculating end date:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Validate user-selected end date\n   */\n  static async validateEndDate(startDate, estimateDays, selectedEndDate) {\n    try {\n      console.log(`HolidayService: Validating end date - start=${startDate}, estimate=${estimateDays}, selected=${selectedEndDate}`);\n      const response = await fetch(`${API_BASE_URL}/tasks/validate-end-date?startDate=${startDate}&estimateDays=${estimateDays}&selectedEndDate=${selectedEndDate}`);\n      if (!response.ok) {\n        throw new Error(`Failed to validate end date: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('HolidayService: Validation result:', result);\n      return result;\n    } catch (error) {\n      console.error('HolidayService: Error validating end date:', error);\n      return {\n        isValid: false,\n        message: 'Validation error'\n      };\n    }\n  }\n\n  /**\n   * Check if a specific date is a holiday\n   */\n  static async isHoliday(date) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/holidays/check?date=${date}`);\n      if (!response.ok) {\n        throw new Error(`Failed to check holiday: ${response.status}`);\n      }\n      const isHoliday = await response.json();\n      return isHoliday;\n    } catch (error) {\n      console.error('HolidayService: Error checking holiday:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if a specific date is a working day\n   */\n  static async isWorkingDay(date) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/holidays/working-day?date=${date}`);\n      if (!response.ok) {\n        throw new Error(`Failed to check working day: ${response.status}`);\n      }\n      const isWorkingDay = await response.json();\n      return isWorkingDay;\n    } catch (error) {\n      console.error('HolidayService: Error checking working day:', error);\n      return true; // Default to true if can't check\n    }\n  }\n\n  /**\n   * Format holidays for calendar display\n   */\n  static formatHolidaysForCalendar(holidays) {\n    return holidays.reduce((acc, holiday) => {\n      acc[holiday.holidayDate] = {\n        name: holiday.holidayName,\n        type: holiday.holidayType,\n        isWorkingDay: holiday.isWorkingDay,\n        description: holiday.description\n      };\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Get holiday info for a specific date\n   */\n  static getHolidayInfo(holidays, date) {\n    return holidays.find(holiday => holiday.holidayDate === date);\n  }\n}\nexport default HolidayService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","HolidayService","fetchHolidays","console","log","response","fetch","ok","Error","status","holidays","json","length","error","fetchHolidaysInRange","startDate","endDate","calculateEndDate","estimateDays","method","headers","body","JSON","stringify","result","validateEndDate","selectedEndDate","isValid","message","isHoliday","date","isWorkingDay","formatHolidaysForCalendar","reduce","acc","holiday","holidayDate","name","holidayName","type","holidayType","description","getHolidayInfo","find"],"sources":["/home/abd_faiyaz/ontik_project_1/Gantt_project_v1/src/main/resources/static/React_Frontend/frontend/src/services/HolidayService.js"],"sourcesContent":["/**\n * Holiday Service for frontend API calls\n * Handles communication with backend holiday endpoints\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass HolidayService {\n    /**\n     * Fetch all holidays from backend\n     */\n    static async fetchHolidays() {\n        try {\n            console.log('HolidayService: Fetching all holidays');\n            const response = await fetch(`${API_BASE_URL}/holidays`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch holidays: ${response.status}`);\n            }\n            const holidays = await response.json();\n            console.log(`HolidayService: Fetched ${holidays.length} holidays`);\n            return holidays;\n        } catch (error) {\n            console.error('HolidayService: Error fetching holidays:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Fetch holidays within a date range\n     */\n    static async fetchHolidaysInRange(startDate, endDate) {\n        try {\n            console.log(`HolidayService: Fetching holidays from ${startDate} to ${endDate}`);\n            const response = await fetch(`${API_BASE_URL}/holidays/range?start=${startDate}&end=${endDate}`);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch holidays in range: ${response.status}`);\n            }\n            const holidays = await response.json();\n            console.log(`HolidayService: Fetched ${holidays.length} holidays in range`);\n            return holidays;\n        } catch (error) {\n            console.error('HolidayService: Error fetching holidays in range:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Calculate end date based on start date and estimate days\n     */\n    static async calculateEndDate(startDate, estimateDays) {\n        try {\n            console.log(`HolidayService: Calculating end date for start=${startDate}, estimate=${estimateDays} days`);\n            const response = await fetch(`${API_BASE_URL}/tasks/calculate-end-date`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    startDate: startDate,\n                    estimateDays: estimateDays\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to calculate end date: ${response.status}`);\n            }\n\n            const result = await response.json();\n            console.log('HolidayService: End date calculation result:', result);\n            return result;\n        } catch (error) {\n            console.error('HolidayService: Error calculating end date:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Validate user-selected end date\n     */\n    static async validateEndDate(startDate, estimateDays, selectedEndDate) {\n        try {\n            console.log(`HolidayService: Validating end date - start=${startDate}, estimate=${estimateDays}, selected=${selectedEndDate}`);\n            const response = await fetch(\n                `${API_BASE_URL}/tasks/validate-end-date?startDate=${startDate}&estimateDays=${estimateDays}&selectedEndDate=${selectedEndDate}`\n            );\n\n            if (!response.ok) {\n                throw new Error(`Failed to validate end date: ${response.status}`);\n            }\n\n            const result = await response.json();\n            console.log('HolidayService: Validation result:', result);\n            return result;\n        } catch (error) {\n            console.error('HolidayService: Error validating end date:', error);\n            return { isValid: false, message: 'Validation error' };\n        }\n    }\n\n    /**\n     * Check if a specific date is a holiday\n     */\n    static async isHoliday(date) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/holidays/check?date=${date}`);\n            if (!response.ok) {\n                throw new Error(`Failed to check holiday: ${response.status}`);\n            }\n            const isHoliday = await response.json();\n            return isHoliday;\n        } catch (error) {\n            console.error('HolidayService: Error checking holiday:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Check if a specific date is a working day\n     */\n    static async isWorkingDay(date) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/holidays/working-day?date=${date}`);\n            if (!response.ok) {\n                throw new Error(`Failed to check working day: ${response.status}`);\n            }\n            const isWorkingDay = await response.json();\n            return isWorkingDay;\n        } catch (error) {\n            console.error('HolidayService: Error checking working day:', error);\n            return true; // Default to true if can't check\n        }\n    }\n\n    /**\n     * Format holidays for calendar display\n     */\n    static formatHolidaysForCalendar(holidays) {\n        return holidays.reduce((acc, holiday) => {\n            acc[holiday.holidayDate] = {\n                name: holiday.holidayName,\n                type: holiday.holidayType,\n                isWorkingDay: holiday.isWorkingDay,\n                description: holiday.description\n            };\n            return acc;\n        }, {});\n    }\n\n    /**\n     * Get holiday info for a specific date\n     */\n    static getHolidayInfo(holidays, date) {\n        return holidays.find(holiday => holiday.holidayDate === date);\n    }\n}\n\nexport default HolidayService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}